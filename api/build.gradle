plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev.legacyforge'
}

legacyForge {
    mcpVersion = minecraft_version
    if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformers = ["src/main/resources/META-INF/accesstransformer.cfg"]
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

dependencies {
    compileOnly("org.spongepowered:mixin:0.8.5")
    implementation("com.google.code.findbugs:jsr305:3.0.1")

    compileOnly("io.github.llamalad7:mixinextras-common:0.5.0")
    annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0")

    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

tasks.register("releaseApi") {
    dependsOn(tasks.named("build"))
    doLast {
        copy {
            from(file("build/libs/${mod_id}-${project.name}-${minecraft_version}-${version}.jar"))
            into(rootProject.file("output/$version"))
        }
    }
}

publishing {
    publications {
        create("apiPublication", MavenPublication) {
            groupId = "dev.obscuria"
            artifactId = "fragmentum-api"
            version = "${minecraft_version}-${version}"
            artifact(tasks.named("jar").get())
        }
    }

    repositories {
        maven {
            name = "local"
            url = uri("${rootProject.projectDir}/output/repo")
        }
    }
}
